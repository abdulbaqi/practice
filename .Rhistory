library(wbstats)
library(data.table)
wbsearch(pattern="debt stock")
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
'
idb57= c('AF', 'AL', 'DZ', 'AZ', 'BH', 'BD', 'BJ', 'BN', 'BF', 'CM', 'TD', 'KM', 'CI', 'DJ', 'EG', 'GA', 'GM', 'GN', 'GW', 'GY', 'ID', 'IR', 'IQ', 'JO', 'KZ', 'KW', 'KG', 'LB', 'LY', 'MY', 'MV', 'ML', 'MR', 'MA', 'MZ', 'NE', 'NG', 'OM', 'PK', 'PS', 'QA', 'SA', 'SN', 'SL', 'SO', 'SD', 'SR', 'SY', 'TJ', 'TG', 'TN', 'TR', 'TM', 'AE', 'UG', 'UZ', 'YE')
idb57= c('AF', 'AL', 'DZ', 'AZ', 'BH', 'BD', 'BJ', 'BN', 'BF', 'CM', 'TD', 'KM', 'CI', 'DJ', 'EG', 'GA', 'GM', 'GN', 'GW', 'GY', 'ID', 'IR', 'IQ', 'JO', 'KZ', 'KW', 'KG', 'LB', 'LY', 'MY', 'MV', 'ML', 'MR', 'MA', 'MZ', 'NE', 'NG', 'OM', 'PK', 'PS', 'QA', 'SA', 'SN', 'SL', 'SO', 'SD', 'SR', 'SY', 'TJ', 'TG', 'TN', 'TR', 'TM', 'AE', 'UG', 'UZ', 'YE')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
View(debtidb)
debtdt1 <- as.data.table(debtidb)
[, .(sum=sum(value)), by=indicator]
debtdt1[, .(sum=sum(value)), by=indicator]
debtdt1[, .(sum=sum(value)), by=.(indicator,year)]
debtdt1[, .(sum=sum(value)), by=.(indicator,date)]
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
1.5/2.6
7.4/12.2
5.7/39.6
5.7/34
5.7/4
nonidb <-"AS, AO, AM, BY, BZ, BT, BO, BA, BW, BR, BG, BI, KH, CV, CF, CN, CO, CG, CD, CR, CU, DM, DO, EC, SV, ER, ET, FJ, GE, GH, GD, GT, HT, HN, IN, JM, KE, KI, KP, NA, LA, LS, LR, MK, MG, MW, MH, MU, MX, FM, MD, MN, ME, MM, NA, NP, NI, PW, PA, PG, PY, PE, PH, RO, RW, LC, VC, WS, ST, RS, SB, ZA, SS, LK, SZ, TZ, TH, TL, TO, TV, UA, VU, VN, EH, ZM, ZW"
nonidb<-trimws(strsplit(nonidb, ",")[[1]])
debtnonidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=nonidb)
debtdt1nonidb <- as.data.table(debtnonidb)
debtdt1nonidb[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
3.8/5
1.3/1.9
1/0.6
debtlmy <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country='LMY') #FOR LOW AND MIDDLE INCOME
debtdt1lmy <- as.data.table(debtlmy)
debtdt1lmy[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
debtdt1 <- as.data.table(debtidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
idb57= c('AF', 'AL', 'DZ', 'AZ', 'BH', 'BD', 'BJ', 'BN', 'BF', 'CM', 'TD', 'KM', 'CI', 'DJ', 'EG', 'GA', 'GM', 'GN', 'GW', 'GY', 'ID', 'IR', 'IQ', 'JO', 'KZ', 'KW', 'KG', 'LB', 'LY', 'MY', 'MV', 'ML', 'MR', 'MA', 'MZ', 'NE', 'NG', 'OM', 'PK', 'PS', 'QA', 'SA', 'SN', 'SL', 'SO', 'SD', 'SR', 'SY', 'TJ', 'TG', 'TN', 'TR', 'TM', 'AE', 'UG', 'UZ', 'YE')
indicators <-c('DT.DOD.DECT.CD','NY.GDP.MKTP.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
#convert into data.table
debtdt1 <- as.data.table(debtidb)
View(debtdt1)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
debtnonidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country='LMY') #low income and middle
View(debtnonidb)
debtdt1 <- as.data.table(debtidbnonidb)
debtdt1 <- as.data.table(debtnonidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
debtnonidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country='LMY') #low income and middle
debtdt1 <- as.data.table(debtnonidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
debtdt1 <- as.data.table(debtidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
library(wbstats)
library(data.table)
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
debtdt1 <- as.data.table(debtidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
idb57= c('AF', 'AL', 'DZ', 'AZ', 'BH', 'BD', 'BJ', 'BN', 'BF', 'CM', 'TD', 'KM', 'CI', 'DJ', 'EG', 'GA', 'GM', 'GN', 'GW', 'GY', 'ID', 'IR', 'IQ', 'JO', 'KZ', 'KW', 'KG', 'LB', 'LY', 'MY', 'MV', 'ML', 'MR', 'MA', 'MZ', 'NE', 'NG', 'OM', 'PK', 'PS', 'QA', 'SA', 'SN', 'SL', 'SO', 'SD', 'SR', 'SY', 'TJ', 'TG', 'TN', 'TR', 'TM', 'AE', 'UG', 'UZ', 'YE')
indicators <-c('DT.DOD.DECT.CD','NE.EXP.GNFS.CD')
debtidb <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country=idb57)
debtdt1 <- as.data.table(debtidb)
debtdt1[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
1.5/2.6
7.4/12.2
debtlmy <- wb(indicator=indicators, startdate = 1995, enddate = 2014, country='LMY') #FOR LOW AND MIDDLE INCOME
debtdt1lmy <- as.data.table(debtlmy)
debtdt1lmy[date %in% c('1995', '2005', '2014'), .(sum=sum(value)), by=.(indicator,date)]
library(XLConnect)
install.packages("XLConnect")
library(jsonlite)
quandl_url <- "http://www.quandl.com/api/v1/datasets/IWS/INTERNET_INDIA.json?auth_token=i83asDsiWUUyfoypkgMz"
quandl_data <- fromJSON(quandl_url)
url_csv <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/water.csv"
water <- read.csv(url_csv)
View(water)
water <- read.csv(url_csv, stringsAsFactors = F)
View(water)
water_json <- toJSON(water)
pretty_json <- toJSON(mtcars, pretty=F)
print(pretty_json)
pretty_json
mini_json <- minify(pretty_json)
mini_json
pretty_json <- toJSON(mtcars, pretty=T)
print(pretty_json)
library(tidyr)
install.packages("tidyr")
library(wbstats)
library((data.table))
countries <- data.table(wbcountries())
library(data.table)
countries <- data.table(wbcountries())
View(countries)
setwd("C:/Users/240018/Dropbox/work related/CEC/R")
dir()
library(readxl)
install.packages("readxl")
library(readxl)
library(readxl)
install.packages("readxl")
library(readx)
library(readxl)
?read_excel
regions <- read_excel("regions.xlsx", col_names = T, skip=3)
View(regions)
library(dplyr)
library(wbstats)
rm(countries)
countries <- wbcountries()
View(countries)
View(regions)
View(countries)
countries$iso3c
which_region(countries$iso3c)
which_region <- function(c){
return(c)
}
which_region(countries$iso3c)
regions <- select(regions, Region, Description, ends_with("ISO3"))
regions <- select(regions,ends_with("ISO3"))
regions2 <- select(regions,ends_with("ISO3"))
install.packages("lazyeval")
regions2 <- select(regions,ends_with("ISO3"))
View(regions2)
regions2 <- select(regions,Region, Description,ends_with("ISO3"))
regions2 <- select(regions,Region, Description,ends_with("ISO3")=ISO3)
rename(regions2, Countries ISO3=iso3)
rename(regions2, ends_with("ISO3")=iso3)
colnames(regions2) <- c("region", "description", "iso3")
regions2$iso3
class(regions2$iso3)
# a function that takes as input a iso3 code and returns all regions it belong to
which_region <- function(c){
if c in regions2$iso3 {print("found")}
}
which_region <- function(c){
if c in regions2$iso3 print("found")
}
# a function that takes as input a iso3 code and returns all regions it belong to
which_region <- function(c)
{
if (c in regions2$iso3) {
print("found")
}
}
which_region <- function(c)
{
if (c %in% regions2$iso3) {
print("found")
}
}
which_region(countries$iso3c)
regions2$iso3[1]
list)regions2$iso3[1])
list(regions2$iso3[1])
"TCD" %in% list(regions2$iso3[1])
TCD %in% list(regions2$iso3[1])
'TCD' %in% list(regions2$iso3[1])
list(regions2$iso3[1]
)
'TCD' %in% regions2$iso3[1]
'TCD' %in% as.list(strsplit(regions2$iso3[1], ","))
as.list(strsplit(regions2$iso3[1], ","))
as.list(strsplit(regions2$iso3[1], ",")[[1]])
'TCD' in as.list(strsplit(regions2$iso3[1], ",")[[1]])
'TCD' %in% as.list(strsplit(regions2$iso3[1], ",")[[1]])
' TCD' %in% as.list(strsplit(regions2$iso3[1], ",")[[1]])
as.list(strsplit(regions2$iso3[1], ",")[[1]])
as.list(trimws(strsplit(regions2$iso3[1], ",")[[1]])
)
as.list(trimws(strsplit(regions2$iso3[1], ",")[[1]]))
'TCD' %in% as.list(trimws(strsplit(regions2$iso3[1], ",")[[1]]))
which_region <- function(c)
{
for (i in 1:nrow(regions2)){
if (c %in% as.list(trimws(strsplit(regions2$iso3[1], ",")[[1]]))){
print (regions2$region[i])
}
}
}
which_region(countries$iso3c)
warnings()
which_region <- function(c)
{
for (i in 1:nrow(regions2)){
if (c %in% as.list(trimws(strsplit(regions2$iso3[i], ",")[[1]]))){
print (regions2$region[i])
}
}
}
which_region(countries$iso3c)
countries$iso3c
apply(countries$iso3c, 1, which_region)
apply(countries$iso3c,2 , which_region)
apply(countries$iso3c,1:2 , which_region)
apply(countries,1:2 , which_region)
apply(countries,1, which_region)
warnings()
result<- as.data.frame(iso=character(), region=character(), desc= character())
result<- as.data.frame(iso=character(), region=character(), desc= character())
result<- data.frame(iso=character(), region=character(), desc= character())
View(result)
result<- data.frame(iso=character(), region=character(), desc= character())
which_region <- function(c)
{
for (i in 1:nrow(regions2)){
if (c %in% as.list(trimws(strsplit(regions2$iso3[i], ",")[[1]]))){
result <- rbind(result, c(c,regions2$region[i], regions2$description[i]))
}
}
}
apply(countries,1, which_region)
View(result)
whic_iso <- function(l){
return(as.list(trimws(strsplit(l, ",")[[1]])))
}
which_iso(regions2$iso3[1])
which_iso <- function(l){
return(as.list(trimws(strsplit(l, ",")[[1]])))
}
which_iso(regions2$iso3[1])
library(tidyr)
library(dplyr)
regions <- read_excel("regions.xlsx", col_names = T, skip=3)
View(regions)
regions <- read_excel("regions.xlsx", col_names = T, skip=3)
View(regions)
reg <- select(regions, Region, Description, ends_with("ISO3"))
colnames(reg)<-c('r', 'des', 'iso')
reg %>% mutate(iso = trimws(strsplit(iso,","))) %>% unnest(iso)
res<- reg %>% mutate(iso = trimws(strsplit(iso,","))) %>% unnest(iso)
View(res)
res<- reg %>%
mutate(iso = trimws(strsplit(iso,","))) %>%
unnest(iso)
trimws(strsplit(reg$iso,",")))
trimws(strsplit(reg$iso,","))
strsplit(reg$iso,", ")
s <- strsplit(reg$iso,", ")
sapply(s, length)
rep(reg$r, sapply(s,length))
rep(reg[,1:2], sapply(s,length))
rep(c(reg$r, reg$des), sapply(s,length))
final <- data.frame(reg = rep(reg$r, sapply(s, length)), des = rep(reg$des,sapply(s, length) ), iso = unlist(s))
View(final)
library(xlsx)
write.xlsx(final)
write.xlsx(final, "regions_unlist.xlsx")
write.xlsx2(final, "regions_unlist.xlsx", row.names = F)
library(dplyr)
regions <- read_excel("regions.xlsx", col_names = T, skip=3)
reg <- select(regions, Region, Description, ends_with("ISO2"))
s <- strsplit(reg$iso,", ") #note the space after the comma
colnames(reg) <- c('r', 'd', 'iso')
# the following link makes the life piece of cake
#http://stackoverflow.com/questions/15347282/split-delimited-strings-in-a-column-and-insert-as-new-rows
#first solution
s <- strsplit(reg$iso,", ") #note the space after the comma
final <- data.frame(reg = rep(reg$r, sapply(s, length)), des = rep(reg$des,sapply(s, length) ), iso = unlist(s))
colnames(reg) <- c('r', 'des', 'iso')
# the following link makes the life piece of cake
#http://stackoverflow.com/questions/15347282/split-delimited-strings-in-a-column-and-insert-as-new-rows
s <- strsplit(reg$iso,", ") #note the space after the comma
#first solution
final <- data.frame(reg = rep(reg$r, sapply(s, length)), des = rep(reg$des,sapply(s, length) ), iso = unlist(s))
View(regions)
reg <- select(regions, Region, Description, Countries, ends_with("ISO2"))
View(reg)
colnames(reg) <- c('r', 'des', 'c','iso')
cn <- strsplit(reg$c,", ")
final <- data.frame(reg = rep(reg$r, sapply(s, length)), des = rep(reg$des,sapply(s, length) ), iso = unlist(s), cnt= unlist(cn))
View(final)
write.xlsx2(final, "regions_unlist.xlsx", row.names = F)
#the objective is to get a list of all regions to which a country belong
# the input is the excel files on regions
#   which Goussi maintains in the alfresco site
# let us start by reading the file.
#  we will use readxl library
library(readxl)
library(dplyr)
regions <- read_excel("regions.xlsx", col_names = T, skip=3)
# now we need to manipulate the table using dplyr
reg <- select(regions, Region, Description, Countries, ends_with("ISO3"))
colnames(reg) <- c('r', 'des', 'c','iso')
# the following link makes the life piece of cake
#http://stackoverflow.com/questions/15347282/split-delimited-strings-in-a-column-and-insert-as-new-rows
#first solution
s <- strsplit(reg$iso,", ") #note the space after the comma
cn <- strsplit(reg$c,", ")
final <- data.frame(reg = rep(reg$r, sapply(s, length)), des = rep(reg$des,sapply(s, length) ), iso = unlist(s), cnt= unlist(cn))
#now write the result to an excel file
library(xlsx)
write.xlsx2(final, "regions_unlist.xlsx", row.names = F)
setwd("C:/Users/240018/Dropbox/work related/CEC/R/practice")
"hello" > "Goodbye"
